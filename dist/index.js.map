{
  "version": 3,
  "sources": ["../lib/validate.js", "../lib/async.js", "../lib/sync.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.dir] - base directory\n* @returns {(Error|null)} error object or null\n*\n* @example\n* var opts = {};\n* var options = {\n*     'dir': '/foo/bar/baz'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*    throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'dir' ) ) {\n\t\topts.dir = options.dir;\n\t\tif ( !isString( opts.dir ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar format = require( '@stdlib/string-format' );\nvar cwd = require( '@stdlib/process-cwd' );\nvar exists = require( '@stdlib/fs-exists' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Asynchronously resolves a path according to a predicate function by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Function} predicate - callback which tests whether a resolved path passes a test\n* @param {Function} clbk - callback to invoke after resolving a path\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} predicate function argument must be a function\n* @throws {TypeError} callback argument must be a function\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n*\n* @example\n* resolveParentPathBy( 'package.json', predicate, onPath );\n*\n* function predicate( path, next ) {\n*     next( null, true );\n* }\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*/\nfunction resolveParentPathBy( path, options, predicate, clbk ) {\n\tvar spath;\n\tvar child;\n\tvar test;\n\tvar opts;\n\tvar done;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 3 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\ttest = predicate;\n\t\tdone = clbk;\n\t} else {\n\t\ttest = options;\n\t\tdone = predicate;\n\t}\n\tif ( !isFunction( test ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Predicate function must be a function. Value: `%s`.', test ) );\n\t}\n\tif ( !isFunction( done ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', done ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\tspath = resolve( dir, path );\n\texists( spath, onExists );\n\n\t/**\n\t* Resolves the next candidate path.\n\t*\n\t* @private\n\t* @returns {void}\n\t*/\n\tfunction next() {\n\t\t// Resolve a parent directory:\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\n\t\t// If we have already reached root, we cannot resolve any higher directories...\n\t\tif ( child === dir ) {\n\t\t\treturn done( null, null );\n\t\t}\n\t\t// Resolve the next search path:\n\t\tspath = resolve( dir, path );\n\t\texists( spath, onExists );\n\t}\n\n\t/**\n\t* Callback invoked after checking for path existence.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onExists( error, bool ) { // eslint-disable-line handle-callback-err\n\t\tif ( bool ) {\n\t\t\treturn test( spath, onTest );\n\t\t}\n\t\tnext();\n\t}\n\n\t/**\n\t* Callback invoked after testing a resolved path.\n\t*\n\t* @private\n\t* @param {(Error|null)} error - error object\n\t* @param {boolean} bool - boolean indicating if a path exists\n\t* @returns {void}\n\t*/\n\tfunction onTest( error, bool ) {\n\t\tif ( error ) {\n\t\t\treturn done( error );\n\t\t}\n\t\tif ( bool ) {\n\t\t\treturn done( null, spath );\n\t\t}\n\t\tnext();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar cwd = require( '@stdlib/process-cwd' );\nvar exists = require( '@stdlib/fs-exists' ).sync;\nvar format = require( '@stdlib/string-format' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Synchronously resolves a path according to a predicate function by walking parent directories.\n*\n* @param {string} path - path to resolve\n* @param {Options} [options] - function options\n* @param {string} [options.dir] - base directory\n* @param {Function} predicate - callback which tests whether a resolved path passes a test\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {(string|null)} resolved path or null\n*\n* @example\n* function predicate() {\n*     return true;\n* }\n*\n* var path = resolveParentPathBy( 'package.json', predicate );\n* // e.g., returns '...'\n*/\nfunction resolveParentPathBy( path, options, predicate ) {\n\tvar spath;\n\tvar child;\n\tvar test;\n\tvar opts;\n\tvar dir;\n\tvar err;\n\tif ( !isString( path ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', path ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\ttest = predicate;\n\t} else {\n\t\ttest = options;\n\t}\n\tif ( !isFunction( test ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', test ) );\n\t}\n\tif ( opts.dir ) {\n\t\tdir = resolve( cwd(), opts.dir );\n\t} else {\n\t\tdir = cwd();\n\t}\n\t// Start at a base directory and continue moving up through each parent directory until able to resolve a search path or until reaching the root directory...\n\twhile ( child !== dir ) {\n\t\tspath = resolve( dir, path );\n\t\tif ( exists( spath ) && test( spath ) ) {\n\t\t\treturn spath;\n\t\t}\n\t\tchild = dir;\n\t\tdir = resolve( dir, '..' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Resolve a path according to a predicate function by walking parent directories.\n*\n* @module @stdlib/fs-resolve-parent-path-by\n*\n* @example\n* var resolveParentPathBy = require( '@stdlib/fs-resolve-parent-path-by' );\n*\n* resolveParentPathBy( 'package.json', predicate, onPath );\n*\n* function predicate( path, next ) {\n*     next( null, true );\n* }\n*\n* function onPath( error, path ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( path );\n* }\n*\n* @example\n* var resolveParentPathBy = require( '@stdlib/fs-resolve-parent-path-by' );\n*\n* function predicate() {\n*     return true;\n* }\n*\n* var path = resolveParentPathBy.sync( 'package.json', predicate );\n* // e.g., returns '...'\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar resolveParentPathBy = require( './async.js' );\nvar sync = require( './sync.js' );\n\n\n// MAIN //\n\nsetReadOnly( resolveParentPathBy, 'sync', sync );\n\n\n// EXPORTS //\n\nmodule.exports = resolveParentPathBy;\n"],
  "mappings": "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",
  "names": ["require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isString", "format", "validate", "opts", "options", "require_async", "__commonJSMin", "exports", "module", "resolve", "isString", "isFunction", "format", "cwd", "exists", "validate", "resolveParentPathBy", "path", "options", "predicate", "clbk", "spath", "child", "test", "opts", "done", "dir", "err", "onExists", "next", "error", "bool", "onTest", "require_sync", "__commonJSMin", "exports", "module", "resolve", "isString", "isFunction", "cwd", "exists", "format", "validate", "resolveParentPathBy", "path", "options", "predicate", "spath", "child", "test", "opts", "dir", "err", "setReadOnly", "resolveParentPathBy", "sync"]
}
